Ubuntu 下安装adb：
~/.bashrc
export PATH=${PATH}:/home/luobin/platform-tools
sudo apt-get install ia32-libs

lsusb
Bus 002 Device 009: ID 8087:0a21 Intel Corp. 
/etc/udev/rules.d/51-android.rules
SUBSYSTEM=="usb", ATTRS{idVendor}=="8087", ATTRS{idProduct}=="0a21", MODE="0666"
chmod 755 /etc/udev/rules.d/51-android.rules
sudo service udev restart
在~/.andrdoid目录下，新建一个adb_usb.ini文件，然后把idVendor加进去，比如你的idVendor是0bb4，你就输入“0x0bb4”然后重复上述步骤就ok了。
ubuntu下adb 必须以root权限来启动？
--------------------------------------------------------------------- 
安装并启动ssh服务：
ssh客户端：sudo apt-get install openssh-client
ssh服务端：sudo apt-get install openssh-server
启动ssh服务：sudo /etc/init.d/ssh start 或者 service ssh start
检查：ssh -V	ps -ef | grep sshd

ssh
ssh-keygen -t rsa -C "yourEmail@email.com"   #~/.ssh目录下生成公钥和私钥
ssh免密码登陆server：客户端publicKey添加到服务端的authorzied_keys(chmod 600),  服务端fingerprint添加到客户端known_host 

开发机环境搭建：
Setup_android_env.sh
cats安装：(即图形化的自动化测试用例集合)
git clone ssh://<myIdsid>@git-ccr-1.devtools.intel.com:29418/cats-rel
git branch -a 
git checkout -t remotes/origin/main

repo为多个projects创建、切换、删除、合并分支，并批量执行下载.更新.提交 
(google的repo脚本放在~/bin/目录下)
git只能管理单个工程，repo可以管理多个工程。
repo：http://blog.chinaunix.net/uid-9185047-id-445176.html


Permission deny (publickey):
.gitconfig配置文件 repo gerrit配置文件 ssh-keygen配置文件~/.ssh/config
git branch -a  本地分支
git remote show `git remote`
查看远程分支 远程库及工程名，
manifest.xml清单文件
http://blog.csdn.net/stevenhu_223/article/details/8828130

1.与下载代码相关的：.gitconfig、~/.ssh/config(config文件中添加：IdentityFile=~/.ssh/id_rsa)、publicKey、删除~/.ssh/known_hosts (ssh -p 29418 user@server_url)
与用户账户相关的：登录各种系统
账户通过gerrit、.gitconfig、~/.ssh/config与publickey相关联

2.更改~/.ssh/目录下的文件权限: 
chmod go-w ~/
chmod 700 ~/.ssh
chmod 0600 ~/.ssh/id_rsa
chmod 0600 ~/.ssh/id_dsa.pub
chmod 600 ~/.ssh/authorized_keys
chmod 600 ~/.ssh/config
chmod 644 ~/.ssh/known_hosts
config和known_hosts文件可删除
cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys
3.	
# start the ssh-agent in the background
ssh-agent -s
eval `ssh-agent`
# Agent pid 59566
ssh-add ~/.ssh/id_rsa
ssh-add -l

gerrit：
repo --trace sync a/bsp/dolby_ds1/vendor/intel/PRIVATE/dolby_ds1
ssh -p 29418 username@gerritURL验证
gerrit上：UserName、FullName、Email、SSH Public key
gerrit上面同一账户可添加多个SSH Public key
Gerrit服务默认打开了两个端口，SSH端口是29418，Web端口是8080。

create a new patch set for the same Change-Id：
1.cherry-pick <commitID> your patch (from gerrit UI) to your machine.
2.Change what you want and do a git add on the files you want.
3.Amend the last commit using 【git commit --amend】 and 【keep the same Change-Id】
4.Push your changes: git push origin HEAD:refs/for/branch_name
It will create a new patch set.

local build fail:
单个工程初始化及查看：
git remote -v pull/push  远程主机名 工程名 
git remote show `git remote`
git branch  -a 本地分支-->远程分支
git log 查看已是最新提交
.git目录

repo start $branch .
repo sync -c -j4 .
gerrit上检查最新提交 
mm -B build 有Android.mk的单个工程

repo start $branch --all
repo sync -c -f -j4 

repo version: repo --version验证
permission   gerrit查看project权限


secureCRT ssh远程登录
文件传输
scp
secure File Transfer

win下看代码，linux下编译

ant、maven：java自动化编译
Makefile: c++自动化编译
shell、 python 
--------------------------------------------------------------------------------
tools:
gitServer目录: 
git init --bare projectName.git			#初始化服务器端仓库
git：http://git-scm.com/book/zh 上次提交.工作区.暂存区.本地库 	远程库
git工程读写权限设置
touch  <git工程目录>/git-export-daemon-ok 空文件
git daemon --reuseaddr --base-path=<git工程父目录> &

git clone username@server_name:~/dir/projectName.git    #任意目录下执行
git clone username@server_name:~/dir/projectName.git .  #空目录下执行 
第一次在服务器上面创建仓库的时候没有任何分支，那么需要在本地创建了之后推送一个分支到服务器上面。
即：第一次push必须这样写 git push origin master:master  #from...to  
git checkout -b branchName -t remotes/origin/branchName
.git
.gitignore
~/.gitconfig


git用户管理即服务器用户管理
服务器创建用户：adduser
编辑/etc/passwd这个文件，找到类似这样的行git:x:1000:1000::/home/git:/bin/sh,然后把/bin/sh改为/usr/bin/git-shell，这样git这个账户就只能用来克隆或者推送数据到git仓库中了，而不能用它来登录到主机。
创建工程在服务器端，其他都在客户端
远程分支就是本地分支push到服务器上的时候产生的
http://blog.csdn.net/fyh2003/article/details/7528157



分支管理：
清空所有changes后，才能新建分支，切换分支、cherry-pick、 git am打补丁。即：
git reset --hard HEAD && git clean -df 	#清空changes 
git branch -a 查看所有分支(本地分支和远程分支)
git checkout -b <new_branch> #新建分支并切换到新分支。 git branch <new_branch> 只新建分支
git checkout branchName/tagName/SHA-1 #切换分支
git merge dev #将指定分支合并到当前分支
git branch -D branchName #删除分支


代码更新：
git fetch origin master
git merge origin/master
git pull # 更新当前分支
先更新，再提交。
若有冲突，手动解决冲突后，再正常提交即可。
git fetch #将远程库的更改更新到本地库
git diff #查看差别
git merge #合并文件

代码提交：
git add . #添加changes到暂存区
git rm -rf # 从版本库中删除,从工作区和暂存区删除，支持regex正则来批量删除，用git reset HEAD <file>...恢复 
rm 从工作区删除，用git checkout 恢复
git commit -s -m --amend ##把暂存区中的修改提交到本地库中 
git push 远程主机名 本地分支名:远程分支名  # 
git push origin #如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略
git push origin master (--force) #将本地的master分支推送到origin主机的master分支。省略远程分支名,表示将本地分支与远程分支同名
git add .
git commit --amend
git commit -a -s -m ""
git pull origin remoteBranchName:localBranchName    #from...to
git push origin localBranchName:remoteBranchName 
管理远程主机名
git remote  
git remote -v #列出远程主机信息
git remote add origin ssh://git@dev.lemote.com/rt4ls.git #让origin指向ssh://git@dev.lemote.com/rt4ls.git 即origin为后者的别名
git remote rename <原主机名> <新主机名> #远程主机的改名
git remote show <主机名> #查看该主机的详细信息
修改远程仓库：$ git remote set-url --push[name][newUrl]
删除远程仓库：$ git remote rm [name]

本地版本还原：
工作区、(暂存区.track、本地库)
git checkout -- <fileName>  #还原单个文件
git checkout 8a722f3046 filepath/filename 
git checkout .   #discard 工作区
git reset --hard HEAD~n/SHA-1值 #还原多个文件
--hard 还原工作区、暂存区、本地库					会对所有分支删除commit
--mixed(默认值)还原暂存区、本地库			 		只对当前分支的删除commit
--soft 还原本地库	
git checkout .	# 放弃本地所有已做过的修改.暂存区覆盖工作区
git clean -df(-xdf) # 删除所有untracked的文件，但不会清除上级目录中的文件

服务器端版本还原：
git revert HEAD~n或者commitID
1. git revert是用一次新的commit来回滚之前的commit，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。 可用来撤销已经merge进repo中的代码
2. 在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为git revert是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是git reset是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。 
cherry-pick、git am后都会生成一个新的commitID  

HEAD指向最近一次提交的指针。
HEAD~4 == HEAD^^^^ #祖先提交，即父提交的父提交 ~<n>相当于连续的<n>个”^”.
HEAD~4 == HEAD^^^^ !=HEAD^4 #第4个直接父提交 (即一次提交可以有N个直接父提交git log --pretty=raw查看)
工程、分支、commitID
repo forall -c git_command

下载指定版本的代码: 
git checkout SHA-1值
checkout只会移动HEAD指针，reset会改变HEAD的引用值。
git log –-graph #查看当前分支提交ID的树状图

多个commit合并为一个commit：
git reset HEAD^
git commit -a -s --amend
http://www.ruanyifeng.com/blog/2014/06/git_remote.html

多工程：
repo.gerrit管理着多个工程: 一个工程是一个git库
代码更新： 
repo start xx --all   #所有工程新建分支 (repo start branchName . #单个工程创建分支)
repo sync -c -f -j4	  #更新所有工程	  (repo sync . #更新单个工程)

代码提交：
repo upload --cur .   #会上传本地库的多个commit到gerrit上，但一个commit对应一个patch
commitID是patchSetID， patchID是patchID
git am 和cherry-pick后就是一个新的commitID

repo forall -c git status | grep -20 'git add <file>'  # 查看本地所有已做过的修改
repo forall [<project>...] -c gitCommand  #repo针对某个工程执行git命令
find . -name .git | wc -l #查看repo库工程个数    715个git库
repo --trace sync a/bsp/dolby_ds1/vendor/intel/PRIVATE/dolby_ds1
repo overview
repo list #列出所有的工程路径 ：工程名  (工程名与gerrit上的工程名一致)
repo branches #查看所有分支
repo checkout branchName #所有工程切换分支
repo abandon branchName #所有工程删除指定分支
cherry-pick patchSet：到相应的工程目录下cherry-pick

http://blog.csdn.net/benkaoya/article/details/8680886
repo+git更新、提交流程图片
git用于单工程，repo用于多工程 (repo可用于单工程，也可用于多工程)
---------------------------------------------------------------------
vim查看my.patch文件所需打在的目录
以patch为单位，patch即changes
打多个patch时是要有先后顺序的
两个patches之间的冲突： 即同时修改 同一文件的同一行、同一个binary文件

传统的打patch方式: diff、patch命令、
http://blog.csdn.net/jennal/article/details/1652095
diff -ruaN oldFile newFile > my.patch #创建patch
patch -p1 < my.patch #打补丁  (-p<N>来去掉路径前的N个/) 
-p0 从当前目录查找目的文件（夹）
-p1 从当前目录开始查找并且忽略掉patch文件的第一层目录。
patch -R -p1 < my.patch #给新版本打补丁，让它变成老版本
vim编辑查看patch文件、patch文件头结构
oldFile 、newFile 、patchFile #只要知道其中任意两个文件就可以得出第三个文件
如果patch失败，patch会把成功的patch行给patch上，同时（无条件）生成备份文件和一个.rej文件。.rej文件里是没有成功提交的patch行，需要手工参照.rej文件的提示patch上去。
打完补丁后，需要检查一下有没有拒绝执行的文件，即检查.rej文件的存在。使用命令： find . -name *.rej 
git专用patch有作者.email等信息，便于追踪。 
一个commit对应一个patch

git diff --no-prefix > my.patch #创建标准patch
git format-patch HEAD^即(position)  #创建git专用的patch,更像是一封email 
git format-patch old-SHA..new-SHA #基于base连续创建多个patches
git reset HEAD^ --hard 
执行git am 前先执行一下git am --abort
git am 0001-isp_acc-update-acc-2400-for-tag-irci_master_20140816.patch #git am *.patch #使用patch

git am –-abort  取消，撤销 
git am –-skip   省略，忽略
git am --resolved





查看tag情况：git tag
新建一个tag：git tag <tagname> <commitid>
删除一个tag：git tag -d <tagname>
查看帮助：git tag -h



#add reviewer:
git config  remote.origin.receivepack 'git receive-pack --re=qiang.han@intel.com  --re=rita.geng@intel.com --re=ping2.yang@intel.com --re=yuxin.mao@intel.com --re=dongdong.zhang@intel.com --re=huanan.guo@intel.com'

Then Git configure file of project will be updated as below.
$ cat .git/config
[remote "origin"]
        fetch = +refs/heads/*:refs/remotes/origin/*
        url = ssh://qhan2@icggerrit.ir.intel.com:29418/vied-viedandr-cats-src
        receivepack = git receive-pack --re=qiang.han@intel.com --re=ping2.yang@intel.com --re=yuxin.mao@intel.com --re=dongdong.zhang@intel.com --re=huanan.guo@intel.com --re=rita.geng@intel.com

