数据AES加密，排序md5.sha1签名校验，token校验
对一个文件进行两次以上AES加密不就无法判定解密成功了？尤其是分段异码加密，暴软无法知道各个密码对应的加密范围，即使遍历到正确的密码，返回的仍然是乱码。
(重点：1.防止应用程序包被破解。2.防止代码被反编译)(混淆，加固.加壳)
AES256+RSA4096(数字说的是秘钥长度)：AES的秘钥动态生成(时间戳，随机数、UUID)，一次一密的动态加密算法(永恒之蓝问题如何被解决？)
AES加密明文数据，RSA加密明文的消息摘要和AES秘钥：RSA解密获取消息摘要和AES秘钥，AES秘钥解密数据，消息摘要判断是否相同.即数据是否被中间人修改
公钥加密，私钥解密；私钥加签，公钥验签。签名算法即消息摘要算法
(重点：1.保护程序中公钥.私钥文件的安全。2.并防止AES和RSA的密码被暴力破解)

Java 默认的 RSA 实现每次生成的密文都不一致，即使每次使用同一个明文、同一个公钥。这是因为Java 默认的 RSA 实现是 "RSA/None/PKCS1Padding"，
而RSA 的 PKCS #1 padding 方案在加密前对明文信息进行了随机数填充。
你可以使用以下办法让同一个明文、同一个公钥每次生成同一个密文，但是你必须意识到你这么做付出的代价是什么。
比如，你可能使用 RSA 来加密传输，但是由于你的同一明文每次生成的同一密文，攻击者能够据此识别到同一个信息都是何时被发送。
Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
Security.addProvider(new com.sun.crypto.provider.SunJCE());
final Cipher cipher = Cipher.getInstance("RSA/None/NoPadding", "BC"); 

------------------------------------------------------------------------------------------------
1. openssl
https://blog.csdn.net/oldmtn/article/details/52208747
https://blog.csdn.net/gengxiaoming7/article/details/78505107
https://www.cnblogs.com/LittleHann/p/3738141.html
2. keytool(tomcat 配置ssl)
http://zctya.blog.163.com/blog/static/1209178201251310292958/
3. ssh-keygen
4. md5sum
5. uuid
连连支付http://open.lianlianpay.com/
The whole PKI system of SSH is different from X.509. PKI(Public Key Infrastructure)即"公钥基础设施"
Java Crypto API requires key files to be in PKCS12 format, and that you can use OpenSSL to convert the file into PKCS12 like this:
字符串形式：base64形式的公钥，私钥(java所用私钥须是pkcs8编码格式)
二进制文件形式：der文件公钥和p12文件私钥

私钥，公钥，数字证书(即公钥和一些个人信息的合成)等的文件的格式: PEM(base64字符串) DER(二进制文件) X509 PKCS(二进制文件)这几种格式是可以用openssl互相转化的。
根据私钥生成公钥
根据私钥生成数字证书(数字证书即公钥和私人信息的合成)
根据私钥生成csr证书请求
PEM格式即base64编码的文件,直接打开你能看到一串的英文字母,以-----BEGIN...开头，以-----END...结尾
DER格式是DER编码的二进制文件,直接打开你什么也看不懂!
.X509是通用的证书文件格式定义
.pkcs(公钥加密标准 Public Key Cryptography Standards,也是二进制的文件)的一系列标准是指定的存放密钥的文件标准
X.509 DER 编码(ASCII)的后缀是： .DER .CER .CRT
X.509 PAM 编码(Base64)的后缀是： .PEM .CER .CRT
PKCS7 常用的后缀是： .P7B .P7C .SPC
PKCS12 常用的后缀有： .pfx .p12，是二进制格式，同时含私钥和证书，通常有保护密码
OpenSSL生成的秘钥、证书默认为PEM格式。
https://segmentfault.com/a/1190000006808275
生成RSA私钥(无加密)
openssl genrsa -out rsa_private.key 2048
openssl genrsa -out rsa_private.key 4096
生成RSA私钥(使用aes256加密)
openssl genrsa -aes256 -passout pass:111111 -out rsa_aes_private.key 2048
私钥转加密
openssl rsa -in rsa_private.key -aes256 -passout pass:111111 -out rsa_aes_private.key
私钥转非加密
openssl rsa -in rsa_aes_private.key -passin pass:111111 -out rsa_private.key
私钥PEM转换为pkcs8格式(java所用私钥须是pkcs8编码格式)
openssl pkcs8 -topk8 -inform PEM -outform PEM -in rsa_private.key -nocrypt > private_key.txt
私钥PKCS8转PEM格式
openssl rsa -in pkcs8.pem -out ssleay.pem
生成RSA公钥
openssl rsa -in rsa_private.key -pubout -out rsa_public.key
生成RSA公钥，提供生成私钥时的密码
openssl rsa -in rsa_aes_private.key -passin pass:111111 -pubout -out rsa_public.key
从der证书中提取PEM证书和PEM公钥文件
openssl x509 -inform DER -in cert.crt -pubkey -out cert.pem  > public_key.txt
从PEM证书中提取PEM证书和PEM公钥文件
openssl x509 -inform PEM -in cert.pem -pubkey > public_key.txt
使用已有RSA私钥生成自签名证书
openssl req -new -x509 -days 365 -key rsa_private.key -out cert.crt -config openssl.cnf
重新生成新的RSA私钥和自签名证书
openssl req -newkey rsa:2048 -nodes -keyout rsa_private.key -x509 -days 365 -out cert.crt -config openssl.cnf -subj "/C=CN/ST=GD/L=SZ/O=vihoo/OU=dev/CN=vivo.com/emailAddress=yy@vivo.com"

http://zctya.blog.163.com/blog/static/1209178201251310292958/
一：生成CA证书
1.创建私钥：openssl genrsa -out ca/ca-key.pem 1024
2.创建证书请求(包含公钥和一些个人信息)：openssl req -new -out ca/ca-req.csr -key ca/ca-key.pem
3.自签署证书：openssl x509 -req -days 3650 -in ca/ca-req.csr -signkey ca/ca-key.pem -out ca/ca-cert.pem
4.将证书导出成浏览器支持的.p12格式：openssl pkcs12 -export -clcerts -in ca/ca-cert.pem -inkey ca/ca-key.pem -out ca/ca.p12
二.生成server证书。  
1. openssl genrsa -out server/server-key.pem 1024
2. openssl req -new -out server/server-req.csr -key server/server-key.pem
3. openssl x509 -req -in server/server-req.csr -out server/server-cert.pem -signkey server/server-key.pem -CA ca/ca-cert.pem -CAkey ca/ca-key.pem -CAcreateserial -days 3650
4. openssl pkcs12 -export -clcerts -in server/server-cert.pem -inkey server/server-key.pem -out server/server.p12
三.生成client证书。 
1. openssl genrsa -out client/client-key.pem 1024
2. openssl req -new -out client/client-req.csr -key client/client-key.pem
3. openssl x509 -req -in client/client-req.csr -out client/client-cert.pem -signkey client/client-key.pem -CA ca/ca-cert.pem -CAkey ca/ca-key.pem -CAcreateserial -days 3650
4. openssl pkcs12 -export -clcerts -in client/client-cert.pem -inkey client/client-key.pem -out client/client.p12

PEM私钥和PEM证书转pkcs12格式
openssl pkcs12 -export -in cert.pem -inkey rsa_private.key -out Cert.p12
openssl pkcs12 -name "My Certificate" -export -out fd.p12 -inkey key.pem -in cert.pem -certfile fd-chain.crt
-certfile指定信任链的文件名称, 还可以通过-clcerts和-cacerts选项指定是否只导出客户端及CA证书
从PKCS12格式中提取出PEM格式的私钥和证书
openssl pkcs12 -in dwf_private.pfx -out keyandcert.pem -nodes
从PKCS12格式中提取出PEM格式的私钥
openssl pkcs12 -in key.p12 -nocerts -out private_key.pem -nodes
从PKCS12格式中提取出PEM格式的证书
openssl pkcs12 -in key.p12 -nokeys -out cert.pem -nodes(所有证书)
openssl pkcs12 -in cer.p12 -clcerts -nokeys -out cert.pem -nodes (-clcerts只导出客户端证书，-nodes不加密)
openssl pkcs12 -in cer.p12 -cacerts -nokeys -out cert.pem -nodes (-cacerts只导出ca证书，-nodes不加密)

私钥PEM转pkcs7
openssl crl2pkcs7 -nocrl -out key.p7b -certfile cert.pem -certfile fd-chain.crt
私钥PKCS7转PEM
openssl pkcs7 -in key.p7b -print_certs -out key1.pem

私钥PEM转DER
openssl rsa -in rsa_private.key -outform der-out rsa_aes_private.der
私钥PEM转DER
openssl rsa -inform PEM -outform DER -in rsa_private_key.pem -out rsa_private.der
私钥DER转PEM
openssl rsa -inform DER -outform PEM -in rsa_private.der -out private_key.pem
查看PEM私钥明细
openssl rsa -in rsa_private.pem -text -noout
查看DER私钥细节
openssl rsa -in rsa_private.der -inform der -text -noout

数字证书PEM转DER格式
openssl x509 -inform PEM -outform DER -in cert.pem -out cert.der  
数字证书DER转PEM格式
openssl x509 -inform DER -outform PEM -in cert.der -out cert.pem
查看PEM编码证书细节(openssl默认使用PEM格式)
openssl x509 -in cert.pem -text -noout
查看DER编码证书细节
openssl x509 -in cert.der -inform der -text -noout

RSA签名验签密钥介绍
商户私钥：用于商户端交易签名
商户公钥：上传到连连支付后台服务器，连连支付用于商户的交易验签 
连连支付公钥：配置到商户项目中，用于对连连支付的同步响应及异步通知交易验签
RSA密钥交互原理 
私钥用于签名，公钥用于验签。 
商户使用私钥对请求参数进行签名形成sign参数，请求到连连支付服务端，连连支付利用商户上传的商户公钥进行交易验签； 处理结果使用连连支付私钥进行签名，返回给商户服务器，商户利用配置到项目中的连连支付公钥进行验签。 
1、商户通过商户站上传RSA公钥到连连支付服务器；
2、商户使用商户私钥进行交易参数签名；
3、签名后的交易参数请求到连连支付服务器；
4、连连支付服务器使用商户上传的私钥进行验签，并处理交易；
5、对交易结果使用连连支付私钥签名；
6、商户使用连连支付公钥验签返回的交易结果。

下载密钥生成工具包key_gen_tools_RSA_win.zip并解压
下载openssl密钥生成工具使用说明，按照文档介绍生成RSA公私钥

验签失败自查方案
1、确认公私钥是否一致；
2、确认字符集是否一致；
3、确认使用的签名算法是否一致；MD5WithRSA

------------------------------------------------------------------------------------------------
加密大文件用对称加密，速度快；非对称加密(公钥长度一般<私钥长度，密文长度=密钥长度)速度慢，且单次加密最大明文长度有限。
对称加密算法加密数据，非对称加密算法加密签名摘要（对称加密速度快，加密数据长度无限制，非对称加密速度慢，加密数据长度有限）签名算法即消息摘要算法
https://blog.csdn.net/defonds/article/details/42775183
1.RSA一次可加密的最大明文长度是有限制的：RSA加密的明文长度不能超过密钥长度。比如 Java 默认的 RSA 加密实现不允许明文长度超过密钥长度减去 11(单位是字节byte)。
也就是说，如果我们定义的密钥长度为 1024位.128字节(可通过java.security.KeyPairGenerator.initialize(int keysize)来定义密钥长度)，生成的密文长度128字节，
那么我们需要加密的明文长度不能超过128字节-11字节=117字节。也就是说，我们最大能将 117 字节长度的明文进行加密，否则会出问题(抛诸如 javax.crypto.IllegalBlockSizeException: Data must not be longer than 53 bytes 的异常)。
而 BC 提供的加密算法能够支持到的 RSA 明文长度最长为密钥长度。

RSA加密的明文长度不能超过密钥长度，RSA加密生成的密文长度总是固定的, 等于密钥长度。
RSA明文分片多次加密，自然密文长度成倍增长，已不属于一次加密的问题，不能放到一起考虑。非对称加密速度比对称加密速度慢，所以不建议分片加密。
https://blog.csdn.net/lvxiangan/article/details/45487943
实际运算结果可能会略小于1024bits，跟素数的生成算法有关系，真实的情况是素数生成器也只是在1024bits对应的整数附近进行“摸索”而已。

2. 可以通过修改生成密钥的长度来调整密文长度
生成密文的长度等于密钥长度。密钥长度越大，生成密文的长度也就越大，加密的速度也就越慢，而密文也就越难被破解掉。
著名的"安全和效率总是一把双刃剑"定律，在这里展现的淋漓尽致。我们必须通过定义密钥的长度在"安全"和"加解密效率"之间做出一个平衡的选择。

3.Java 默认的 RSA 实现每次生成的密文都不一致，即使每次使用同一个明文、同一个公钥。这是因为Java 默认的 RSA 实现是 "RSA/None/PKCS1Padding"，
而RSA 的 PKCS #1 padding 方案在加密前对明文信息进行了随机数填充。
你可以使用以下办法让同一个明文、同一个公钥每次生成同一个密文，但是你必须意识到你这么做付出的代价是什么。
比如，你可能使用 RSA 来加密传输，但是由于你的同一明文每次生成的同一密文，攻击者能够据此识别到同一个信息都是何时被发送。
Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());  
final Cipher cipher = Cipher.getInstance("RSA/None/NoPadding", "BC"); 

4. 加密的系统不要具备解密的功能，否则 RSA 可能不太合适
公钥加密，私钥解密。加密的系统和解密的系统分开部署，加密的系统不应该同时具备解密的功能，这样即使黑客攻破了加密系统，他拿到的也只是一堆无法破解的密文数据。
否则的话，你就要考虑你的场景是否有必要用 RSA 了。

5.Cipher 是有状态的，而且不是线程安全的
javax.crypto.Cipher 是有状态的，不要把 Cipher 当做一个静态变量，除非你的程序是单线程的，也就是说你能够保证同一时刻只有一个线程在调用 Cipher。
否则你可能会像笔者似的遇到 java.lang.ArrayIndexOutOfBoundsException: too much data for RSA block 异常。
遇见这个异常，你需要先确定你给 Cipher 加密的明文(或者需要解密的密文)是否过长；排除掉明文(或者密文)过长的情况，你需要考虑是不是你的 Cipher 线程不安全了。

-------------------------------------------------------------------------------------------
消息摘要算法可以被暴力破解:   1.截取密文已知，2.明文未知，可用穷举，3.消息摘要算法可猜到
aes加密无法暴力破解: 1.截取密文已知，2.明文未知，3.秘钥未知
AES如何进行暴力破解？
单次aes加密无法暴力破解，因为aes密码错误没有提示？CRC校验。密码错误只会生成错误乱码的解密文件？
对一个文件进行两次以上AES加密不就无法判定解密成功了？尤其是分段异码加密，暴软无法知道各个密码对应的加密范围，即使遍历到正确的密码，返回的仍然是乱码。
这方面的软件首推WINHEX，配合文件拆分功能，要解密，基本上是无门，即使今后电脑的运行速度趋近无穷快，也不行，除非具备人工智能。
AES256+RSA4096
永恒之蓝：加密用的是128位的AES， CBCmode。 然后4096位RSA加密了AES的密钥。


那是因为对密码存了个hash/校验码，或者对解密的结果存了个校验码吧。光这一点点信息，不会泄露密码，但可以提高软件的易用性。
解密的原理是这样：软件对加密数据块进行解压缩，然后解成源文件，对该文件进行CRC校验，存在RAR文件中的源文件CRC校验码比较，相同则密码正确，不相同则密码错误
AES加密原理
http://www.cnblogs.com/happyhippy/archive/2006/12/23/601353.html
https://blog.csdn.net/Simple_Man_Just/article/details/69258923
https://blog.csdn.net/haohaojian/article/details/55194189
AES256加密被破解，一套1500设备5分钟之内搞定
http://www.360doc.com/content/17/0727/10/16098628_674474843.shtml
http://news.mydrivers.com/1/540/540965.htm

http://www.cnblogs.com/happyhippy/archive/2006/12/23/601353.html
对称密码技术的优点在于效率高，算法简单，系统开销小，适合加密大量数据。对称密钥算法具有加密处理简单，加解密速度快，密钥较短，发展历史悠久等优点。
如果你不指定填充及加密模式的话，将会采用 ECB 模式和 PKCS5Padding 填充进行处理。
AES 是块加密，块的长度是 16 个字节，如果原文不到 16 个字节，则需要填充至 16 个字节后再进行处理。
AES 密文长度 = (原文长度 / 16) * 16 + 16  这里的“/”表示整除
如果你想密文与原文长度一样的话，就不能使用块加密算法，需要使用流加密算法，比如 RC4 算法

加密算法原理：
异或的特点是原始值经过两次异或某一个数后会变成原来的值，所以有时利用这个特性来进行加密，加密端把数据与一个密钥进行异或操作，生成密文。
接收方收到密文后利用加密方提供的密钥进行再次异或操作就能得到明文。
-------------------------------------------------------------------------------------------
防止反编译
防止机器人攻击：图片验证码、短信验证码
密码的输入安全(键盘监控程序)、传输安全(浏览器安全控件)、存储安全
加密、解密：MD5、Base64编码、DES、3DES、RSA
Base64编码原理：将3个字节变成4个字节、将不可见字符变成可见字符 (Base64码表)
md5加密后的字节变成字符串不一定都是可见字符
环境变量、注册表、复制文件
安装驱动：复制文件到系统指定的驱动目录下

公钥才对外发布，私钥不对外发布。
两对公私钥实现数据都采用公钥加密传输。公钥加密的数据你根本没办法解密，因为私钥不对外发布(客户端的私钥采用文件加密.解密/jni技术/sqlcipher)
非对称加密：安全性要高，但速度慢
对称加密：安全性要低(牵扯到秘钥的分发问题，容易被截获), 但速度快
java访问https，来消除性能的影响？
-------------------------------------------------------------------------------------------
wifi密码破解：wifi加密类型：TKIP AES
路由器wifi的aes加密是建立连接用的aes加密还是传输数据用的aes加密？路由器wifi建立链接用的是消息摘要算法？而连接后与路由器的数据传输用的是aes加密？
一夜之间全世界WIFI都不安全了，你该怎么办？
http://tech.ifeng.com/a/20171017/44718250_0.shtml
https://www.cnblogs.com/lifengfneg/p/8120605.html
WPA全称为Wi-Fi Protected Access，有WPA和WPA2两个标准，是一种保护无线网络安全的加密协议。
在WPA这种加密方式被大规模应用之前，加密方式主要是WEP（Wired Equivalent Privacy），由于每个数据包都使用相同的加密密钥，如果窃听者分析了足够的数据，则可以使用自动化软件找到密钥。
与WEP相比，WPA使用TKIP加密方案，并验证它在数据传输过程中没有被更改。而WPA2使用AES加密方法，进一步提高了安全性。
用不严谨但通俗单位方式来解释，就是你手机和路由器之间每“快递包裹”上的密码都是变化的，而你手机和路由器达成了一种默契，保证只有彼此才拥有正确的钥匙，你的路由器还会拒绝签收那些看起被动过的包裹。
WEP的加密方式在这三种加密中是安全性最弱的， 2001年8月，Fluhrer et al.发表了针对 WEP 的密码分析，利用RC4加解密和IV的使用方式的特性，偷听几个小时之后，就可以把 RC4的钥匙破解出来。
2005年，美国联邦调查局展示了用公开可得的工具可以在三分钟内破解一个用WEP保护的网络。
Wi-Fi加密协议不安全了，还有一道网站端的加密保护用户的数据。
比利时研究人员今日表示：WPA2 安全加密协议已经被破解。
此外，krackattacks网站还给出了一些更专业的建议：比如禁用路由器的客户端功能（例如中继模式）和802.11r（快速漫游）。
Aircrack-ng是一个与802.11编缀的无线网络分析有关的安全软件，主要功能有：网络侦测、数据包嗅探、wep和wpa破解（采用字典攻击）密匙。
Aircrack-ng套件由几部分组成，组成部分如下：
aircrack-ng负责破解wep及wpa密匙；
airdecap-ng通过已知密匙来解密wep或wpa嗅探数据；
tkiptun-ng进行wpa/tkip攻击；
airmon-ng将网卡设置为监听模式；
airodump-ng数据包嗅探：将无线网络数据输送到pcap或ivs文件并显示网络信息。

qq 1071366961 
wifi技术交流群：92953762
字典生成程序编写
802.11帧结构、wifi连接过程、加密方式
https://blog.csdn.net/xinyuan510214/article/details/50570092
-------------------------------------------------------------------------------------------
永恒之蓝原理
心脏出血漏洞
病毒制作者生成一对2048位rsa密钥，公钥（简称Pub1）放在程序中，私钥（简称Pri1）自己保存着，至今也没有公布出来。
病毒感染一台机器时，会生成另一个rsa密钥对，第二对密钥的公钥（简称Pub2）不加密保存在磁盘上；而第二对密钥的私钥（简称Pri2）使用Pub1加密后保存到磁盘。
病毒加密文件时，首先生成一个aes密钥，用Pub2加密，保存在文件头中，然后将原文件用生成的aes密钥加密后添加在含有加密后的密钥的文件头后。
由此可见，需要解密文件就需要aes密钥，而从文件头解密aes密钥需要Pri2来解密使用Pub2加密的密钥。而Pri2被Pub1加密了只能用Pri1来解密，而病毒制作者从未公布出Pri1，世界范围内也没有任何人成功解密（因为若成功解密，则需要Pri1）。
RSA2048和AES256都是理论证明过以现有计算能力不能在多项式级时间内破解的，所以懂了吧，没有Pri1就不能解密，也没有人能从Pub1得到Pri1，所以这个病毒加密过的数据就无解了...

具体地病毒感染电脑后会将电脑里的文件放到内存里进行加密处理，然后再写回到磁盘里，然后把原始文件删除。
咋一看好像没有什么问题，因为病毒的加密算法是目前最顶尖的加密算法，现有计算机是不可能在100年的时间内破解，
什么意思呢，就是密码的可能太多，即使计算机不断地开足马力去尝试不同的密码，100年也试不完。如果量子计算机被研制出来那就另当别论。
好了回到之前的问题，既然加密算法破解不了，那就不可能恢复数据，但为何360能够破解呢。
原因就在于病毒开发者再加密文件数据之后，只是删除了内存中的原始文件，硬盘里的文件并没有删除，只是原始文件占据的磁盘空间被释放了，但原始数据其实还是在的。
一般而言，病毒开发者在加密完文件后会将磁盘上的文件给覆盖掉，但这次病毒开发者可能太大意一时忘记，使得文件是可以恢复的。

关于永恒之蓝的加密方法其实是依赖RSA算法，这种算法为基础设计了比特币，如果RSA被破解，比特币就成了笑话，
事实上1994年，绍尔发明了基于量子计算机的shor算法
（以数学家彼得•秀尔命名的Shor算法（秀尔算法），于1994年发现，是一个针对整数分解的题目的量子算法（在量子计算机上面运作的算法））
这种算法可以轻松破解RSA。

何为勒索病毒？
答：勒索病毒，是一种新型电脑病毒，主要以邮件，程序木马，网页挂马的形式进行传播。
这种病毒利用各种加密算法对文件进行加密，被感染者一般无法解密，必须拿到解密的私钥才有可能破解。被勒索软件感染情况，磁盘文件会被病毒加密为.onion后缀，
该勒索软件是此前活跃的勒索软件Wallet的一类变种，运用了高强度的加密算法难以破解，被攻击者除了支付高额赎金外，往往没有其他办法解密文件，只有支付高额赎金才能解密恢复文件，对学习资料和个人数据造成严重损失。
目前，“永恒之蓝”传播的勒索病毒以ONION和WNCRY两个家族为主，受害机器的磁盘文件会被篡改为相应的后缀，图片、文档、视频、压缩包等各类资料都无法正常打开，只有支付赎金才能解密恢复。

“勒索”病毒原理是什么？
答：病毒传播原因是内网电脑通过网络下载不明信息后，导致中毒并不是通过路由器上共享端口（135-139，445端口）下载的，
只要有人中毒后在内网会通过电脑的共享端口（445端口）进行传播，因此防护此病毒要在传输介质也就是交换机上做策略解决或者电脑终端维护才能彻底解决！



