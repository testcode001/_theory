http://blog.sina.com.cn/s/blog_92737c3301012m9t.html
http://blog.sina.com.cn/s/blog_92737c330100zw43.html

2分钟脸部操
Just do it
功能明确：1.数据2.样式3.性能

一条记录对应一个实例对象， 对应一个hashmap实例对象/一个json对象

1.增加参数来实现过滤判断
4.可在任意节点修改 (高容错性)
状态机即指挥官角色

数据量加大，将xx工作纳入xx系统(长期的)
xx管理：crud操作








代码修改原则：
1.增加但不要随意修改，稳定后代码整洁处理 (对系统来说，增加一个方法的风险要远远小于对方法的修改)。开发.测试.预发.线上四套环境。
开发、测试、预发、线上4套环境
修改配置文件而不是源代码：数字化、信息化

程序设计原则：
配置文件(动态可扩展性.跨机器.夸账户.跨系统.跨平台.跨目录) 支持参数和配置文件  即可在任意目录下运行: 获取类文件所在目录。不是当前目录。
代码(复用.抽取、面向接口编程：声明、实现、调用：按功能模块划分，模块间面向接口编程，模块内面向对象编程.各层MVC思想的递归、设计模式.高内聚低耦合)
各层体现MVC的递归
通用架构
公共模块
业务流程,业务逻辑
http://mobile.51cto.com/abased-386212.htm
代码复用.抽取：哪些是固定的，哪些是变化的
假定一切都是变化的
软件开发中各种"对象"的c.r.u.d操作

1.变化部分.参数采用key=value配置文件中，传递参数/系统环境变量：以达到修改配置文件而不用修改代码来实现移植 (key必须是业务相关的全局唯一标识符 uuidgen.业务相关的日志文件名) (配置文件：避免因修改源码而引发的程序不稳定、避免程序再次编译)
系统设计成配置文件、模块设计成传递参数、各个模块单独运行.测试.替换.mvc模式
流程相同.代码复用.抽取，不同.各自处理(调用函数，传递参数)		(便于修改和维护)
按功能模块划分：多次使用的流程抽取成模块.部门 
由流程manager调用各个模块，各模块之间不要相互调用 
2.业务相关的全局唯一flag标记：处理步骤一致时，实现动态扩展、批量处理、增加判断过滤条件   便于扩展  各版本的兼容性
3.采用系统环境变量.内置变量		便于移植
3.各层之间面向接口编程.常用设计模式：便于模块替换  (数据量加大，分流程.分层)
	面向对象编程，便于数据的管理
4.基于第三方的SDK开发的
5.插件式开发.开放API

数据设计原则：
OO思想： 有关系的数据封装在一起，(便于修改和维护)
面向对象即汉语语句中的主语或宾语(n.) 方法即谓语 介宾即属性

1.设计文档：
整体设计：设计原则、设计模式
业务逻辑设计

2.编码实现
各层之间面向接口编程，高内聚，低耦合，便于模块替换

分布式提供服务，集中式管理
快速env_setup.sh  	将环境搭建脚本纳入git版本控制系统，并加入用户权限管理

实时数据传输系统：定时器 观察者模式实现的触发器

以优质的服务到蓝海地带迅速抢占市场
有效的市场营销



明确需要的数据，详细的日志记录系统，用于数据统计
查看整个系统的日志
查看各个模块的日志

整个系统运行
各个模块单独运行

算法：
flag标记
执行步骤重复时采用递归算法：函数返回前必须有一个结束判断的标记
查找：hash查找 二分法查找 顺序查找
排序算法：
选择排序：O(n*n)
快速排序：平均时间复杂度nlog2(n)。最佳运行时间O(nlgn)，最差O(n^2),(当输入数组已经排好序时)
堆排序：nlog2(n)
http://blog.csdn.net/zndxlxm/article/details/7989366
希尔排序：n的1.2次幂
http://v.youku.com/v_show/id_XMzMyODk4NTQ4.html
http://chenzehe.iteye.com/blog/481188
数据结构：
存储结构：数组、单链表、双向链表(节点中含有上一个及下一个节点的指针)(栈.队列) 、完全二叉树(左序.中序.右序遍历)(堆)(广度优先遍历.从左到右)(深度优先遍历.从上到下)、图、hash散列函数
二叉树左序.中序.右序遍历,前中后都是指的根的位置,孩子节点都是先左后右：左序：根左右、中序：左根右、右序：左右根()
查找一个数组中出现次数最多的元素
单链表反转
如何判断一棵二叉树是完全二叉树：如果是满二叉树或者完全二叉树，在广度优先遍历的时候(从左到右)，这些空洞是在遍历的末尾。根据是否遍历到空洞，整个树的遍历是否结束来判断是否是完全的二叉树
动态规划
等差等比数列
排列组合
uuidgen
md5sum
sha1sum
sha256sum
base64
RSA
AES
DES
3DES
信息摘要.数据加密.数字签名
---------------------------------------------------------------------------------------------
配置文件与ConstantsUtil.java文件的区别：配置文件避免程序再次编译
windows打补丁：面向接口、模块化文件替换 (便于扩展及模块替换、高内聚低耦合)

Linux启动流程：
bios加电自检
1.u盘引导： MBR->
2.硬盘引导: MBR=bootloader+磁盘分区表dpt+结尾标志55aa->进入操作系统即加载内核，初始化进程 
3.光驱引导
MBR的引导：
a.grub/easyBCD是将引导程序写进MBR(是一块物理扇区)的bootloader后，实现多系统引导的 (EasyBCD修改MBR的bootloader)
b.若没有安装grub/easyBCD等引导程序，则读取MBR磁盘分区表dpt中记录着活动分区的位置开始引导操作系统 (DiskGenius修改活动分区)
MBR损坏可通过u盘引导系统来修复
MBR中的程序是独立于操作系统的
---------------------------------------------------------------
java：
网络传输协议：
公共协议：http、smtp、pop3、imap
私有协议：json、xml、webservice、rpc接口
服务器端
客户端

远程进程通信：公共协议
本地进程间通信：私有通信协议
用户名.密码.ip.端口号(协议)

事件类型及事件处理机制
鼠标事件：
键盘事件：
触摸事件： 触摸(down,move,up) ,点击,长按，menu
传感器事件
耳机插孔事件

事件类型：传感器事件、UI事件(点击,触摸,滑动)
事件处理流程：
拦截onInterceptTouchEvent(MotionEvent e)
处理onTouchEvent(MotionEvent e) 
分发dispatchTouchEvent(MotionEvent ev)
事件传递：由上往下一层一层传递，由下往上一层一层处理
消息队列 

view显式流程：
onLayout(boolean changed, int l, int t, int r, int b)
onMeasure(int widthMeasureSpec, int heightMeasureSpec)
onDraw(Canvas canvas)
dispatchDraw(Canvas canvas)

系统调用回调函数，将数据传递给上层：实现人机交互 (c/s模式) 用户触发，系统调用 (系统提供的回调接口)
事件类型：传感器事件、UI事件	(点击,触摸,滑动)
自定义回调函数.监听器最终由系统调用
底层定义接口并调用回调函数，上层实现接口.传递实例对象

采用系统内置变量/配置文件 便于移植
环境搭建脚本
remote_env_setup
local_env_setup

多线程同步.即线程间通信
线程池
大量的耗时的任务采用多线程来执行
大量.耗时任务的准确有序执行：即多线程同步synchronized
开启新线程执行耗时任务，(多线程即用定时器实现cpu的自动化)
单线程内无法实现大量的耗时的任务的准确有序执行。只能用sleep来尽可能的实现有序执行。

大量耗时任务的按指定次序执行： 多线程同步 
大量耗时任务的并行执行： 多线程
大量耗时任务的顺序执行：单线程

数据通过流的方式写入文件，或从文件读出

dbcp c3p0数据库连接池
-------------------------------------------
最直接
见好就收
调用最基础的，并面向市场，面向用户




项目管理：
通知关联部门、立项，便于工作展开
概要设计：
功能模块、执行流程
原型效果图
详细设计：
model、一次响应一个model？
软件设计、框架搭建(编写接口，明确传递参数及返回值)、mvc模式
(分层，实现各个模块之间的解耦，便于模块化替换，便于协同开发。各层之间面向接口编程)
跨工程的通用功能模块细化：网络访问、缓存(数据的分类、范围的划分)、图片的下载.处理.缓存、json解析、数据存储
具体实现

软件设计：
可维护性：配置文件+代码复用即抽取到函数中/抽取到父类中 
版本更新，个版本之间的兼容性：记录各个版本之间的关键差别和问题，类似于微软、qq的不兼容，部分版本强制更新
动态可扩展性：业务逻辑相关的全局唯一标识符
可移植性：跨系统、跨设备、跨机器、跨账户
安全性：

版本更新：应用启动、用户登录、强制更新、非强制更新
单设备登陆：device_token token
应用数据初始化：环境切换
debug版.内测和release版.公测：版本切换、LogUtil


