目标: 所依赖的文件 (依赖文件比目标新，生成目标的命令就会执行) 
(tab)cc -c/-o或者gcc等任意shell命令

make: 自动在当前目录下查找Makefile或者makefile来运行
make -f fileName # 指定makefile文件来编译
makefile开头的目标即为Makefile的默认目标。
"\" 用来连接本行和下一行

make clean : 调用makefile中的clean标签下的linux命令
像clean这种，没有被第一个目标文件直接或间接关联，那么它后面所定义的命令将不会被自动执行，可通过make clean显示调用执行

-n   # 发现错误继续执行而不是退出。例如，我们可以使用这个选项检测出哪个文件编译失败。
-k   #使make仅打印出此命令将会做的事情而不实际执行。
makefile中以“$(objects)”的方式来使用这个变量了
让make自动推导
如此多的源文件，如果每次都要键入gcc命令进行编译的话，那对程序员来说简直就是一场灾难。
make模块化编译，便于编译调试

会不会写makefile，从一个侧面说明了一个人是否具备完成大型工程的能力。



Makefile自动化编译
对于大程序，makefile避免重复编译所有文件。如40+GB的android源码。
make原理：
若文件的依赖关系没变，只改变文件内容，则不用make clean
若文件的依赖关系改变，并更改了Makefile文件，则必须make clean

make error: 
makefile的执行过程就像函数调用的堆栈
依赖的文件存在，则调用命令执行；依赖的文件不存在，则直接报错退出。
对于所定义的命令的错误或是编译不成功，make则根本不理会。
------------------------------------------------------------------------------------------------------
target: dependences
(tab)linuxCmd
1.变量.函数.循环.选择语句	
2.内置变量.内置函数.export/unexport传递参数.关键字 	文件.片段
http://www.cnblogs.com/wang_yb/p/3990952.html
http://www.ha97.com/961.html
http://linux.chinaunix.net/techdoc/develop/2009/07/09/1122854.shtml
make [options] [targets] [VAR=VALUE]...[VAR=VALUE]是在命令行上指定环境变量	

makefile函数：
define <command-name>
command
...
endef

all:
    $(command-name)

makefile常用内置函数：
http://blog.csdn.net/secondjanuary/article/details/9363009

makefile 打印语句：
$(info $(VARNAME))
$(warning
$(error
在makefile中定义一个临时目标
a:
  @echo $(LLVMGCC)
然后make a

Makefile调试：
var.mk
%:
        @echo'$*=$($*)'  
d-%:
        @echo'$*=$($*)'
        @echo'  origin = $(origin $*)'
        @echo'   value = $(value  $*)'
        @echo'  flavor = $(flavor $*)'

[hchen@RHELSVR5]$ make -f test.mk -f var.mk d-COMPILE.c
COMPILE.c=cc -Ifoo -Ibar -O -Wall   -c
  origin = default
  flavor = recursive
   value = $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
我们可以看到：
make的第一个-f后是要测试的makefile，第二个是我们的debug makefile。
后面直接跟变量名，如果在变量名前加”d-”，则输出更为详细的东西。
说一说”d-” 前缀（其意为details），其中调用了下面三个参数。

$(origin)：告诉你这个变量是来自哪儿，file表示文件，environment表示环境变量，还有environment override，command line，override，automatic等。
$(value)：打出这个变量没有被展开的样子。比如上述示例中的 foo 变量。
$(flavor)：有两个值，simple表示是一般展开的变量，recursive表示递归展开的变量。
http://blog.csdn.net/lizhiqiang5846/article/details/7394181
http://oreilly.com.cn/samplechap/gnumakesc/mng_pro_gnu3-12.pdf

Makefile调试：
有时候，我们不想让我们的makefile中的规则执行起来，我们只想检查一下我们的命
令，或是执行的序列。于是我们可以使用make命令的下述参数：

    “-n”
    “--just-print”
    “--dry-run”
    “--recon”
    不执行参数，这些参数只是打印命令，不管目标是否更新，把规则和连带规则下的
命令打印出来，但不执行，这些参数对于我们调试makefile很有用处。

    “-t”
    “--touch”
    这个参数的意思就是把目标文件的时间更新，但不更改目标文件。也就是说，make
假装编译目标，但不是真正的编译目标，只是把目标变成已编译过的状态。

    “-q”
    “--question”
    这个参数的行为是找目标的意思，也就是说，如果目标存在，那么其什么也不会输
出，当然也不会执行编译，如果目标不存在，其会打印出一条出错信息。

    “-W ;”
    “--what-if=;”
    “--assume-new=;”
    “--new-file=;”
    这个参数需要指定一个文件。一般是是源文件（或依赖文件），Make会根据规则推
导来运行依赖于这个文件的命令，一般来说，可以和“-n”参数一同使用，来查看这个依
赖文件所发生的规则命令。

另外一个很有意思的用法是结合“-p”和“-v”来输出makefile被执行时的信息（这个将在
后面讲述）。

makefile
http://goodcandle.cnblogs.com/archive/2006/03/30/278702.html
http://www.ibm.com/developerworks/cn/linux/l-makefile/
http://www.cnblogs.com/hnrainll/archive/2013/01/06/2847069.html
伪目标即没有依赖，不是一个要生成的文件
Makefile把第一个看到的目标作为其最终目标，其他目标默认不执行，除非你显示调用。

shell一定要写在target内部， 否则你写了也白费劲， 是会被make忽略掉的.
Makefile中的shell，每一行是一个进程，不同行之间变量值不能传递。所以，Makefile中的shell不管多长也要写在一行。
Makefile中的变量以$开头， 所以为了避免和shell的变量冲突，shell的变量以$$开头，Shell自己的变量是不需要括号的
makefile允许变量赋值时，'='号两边留空格， shell不允许‘=’号两边有空格哦。
@ 即silent 不输出执行命令本身
makefile中要调用shell脚本需要特殊的语法。$(shell xxx)
makefile通配符：* %

gdb调试技巧：
http://coolshell.cn/articles/3643.html




target: 依赖1 依赖2 \(依赖文件比目标新，生成目标的命令就会执行) 
(tab)gcc.g++命令行/linux命令(末尾不能有空格.tab键.回车等不可见字符)
伪目标：即不是一个要生成的文件



Makefile调试：
notepad++查看Makefile的空格.tab.和换行符
Makefile： 文件不存在即报错退出
依赖的文件存在，则调用命令执行；依赖的文件不存在，则直接报错退出。对于所定义的命令的错误，或是编译不成功，make则根本不理会。
makefile的执行过程即函数调用的过程

gcc/g++命令行编译文件
clang
llvm
gcc的基本格式就是：
    gcc [-option] objectname sourcename
    其中-option是参数，用来控制gcc的编译方式，常见的参数有如下几个：
    -o 表示我们要求输出的可执行文件名：-o binaryname
    -c 表示我们只要求编译器进行编译，输出目标代码,而不进行连接: -c objectivename.o
    -g 表示我们要求编译器在编译的时候提供我们以后对程序进行调试的信息: -g
    -O2 表示我们希望编译器在编译的时候对我们的程序进行一定程度的优化.2表示我们优化的级别.范
        围是1-3.不过习惯上我们都使用2的优化级别.
    -Wall是警告选项,表示我们希望gcc在编译的时候,让gcc输出她认为的一些程序中可能会出问题的一些警
        告信息,比如指针没有初始化就进行赋值等等一些警告信息.
    -l 与之紧紧相连的是表示连接时所要的链接库，比如多线程，如果你使用了pthread_create函数，那么你就应该在编译语句的最后加上"-lpthread"，"-l"表示连接，"pthread"表示要连接的库，注意他们在这里要连在一起写.如：gcc -o test test1.o test2.o -lpthread
    -I 表示将系统缺省的头文件路径扩展到当前路径，默认的路径保存在/etc/ld.conf文件中。
    gcc的例子：
        gcc -c test.c，表示只编译test.c文件，成功时输出目标文件test.o
        gcc -o test test.o，将test.o连接成可执行的二进制文件test
        gcc -o test test.c，将test.c编译并连接成可执行的二进制文件test
        gcc -c test.c -o test.o ，与上一条命令完全相同
        gcc test.c -o test，与上一条命令相同
        gcc -c test1.c，只编译test1.c，成功时输出目标文件test1.o
        gcc -c test2.c，只编译test2.c，成功时输出目标文件test2.o
        gcc -o test test1.o test2.o，将test1.o和test2.o连接为可执行的二进制文件test
        gcc -c test test1.c test2.c，将test1.o和test2.o编译并连接为可执行的二进制文件test

mm -B只适合于Android.mk文件

http://www.gnu.org/software/make/manual/make.html
= 是最基本的赋值 后展开
:= 是覆盖之前的值 先展开
?= 是如果没有被赋值过就赋予等号后面的值
+= 是添加等号后面的值(append)
　　1、“=”
　　make会将整个makefile展开后，再决定变量的值。也就是说，变量的值将会是整个makefile中最后被指定的值。看例子：
　　x = foo
y = $(x) bar
x = xyz
　　在上例中，y的值将会是 xyz bar ，而不是 foo bar 。
　　2、“:=”
　　“:=”表示变量的值决定于它在makefile中的位置，而不是整个makefile展开后的最终值。
　　x := foo
y := $(x) bar
x := xyz
　　在上例中，y的值将会是 foo bar ，而不是 xyz bar 了。

makefile
http://www.cnblogs.com/hesiming/archive/2011/03/15/1984444.html
http://blog.chinaunix.net/uid-25838286-id-3204120.html
android makefile 定义变量:http://blog.csdn.net/earbao/article/details/38702245
android makefile 变量赋值：http://blog.csdn.net/wubin1124/article/details/4337794
makefiel 调试： http://blog.csdn.net/mevin/article/details/6618546

Makefile定义变量   循环.选择语句
Makefile关键字
Makefile内置变量
Makefile文件：单独的环境变量
Makefile片段: 与其他Makefile共用上下文环境变量，并用include指令包含在其他Makefile文件中

定义变量 递归展开=  直接展开:=不能引用其后定义变量的
自动化变量.内置变量
循环.选择 、输入.输出

Makefile：
宏定义
$(macro) 应用这个变量，可以自动的将定义的宏加以展开，并替换使用。
宏(macro) 例如：CFLAGS = -O -systype bsd43
make -p #查看make的默认宏

符号标志及缺省规则
   $@ 代指目标文件
   $< 第一个依赖文件
   $^ 所有的依赖文件
   $? 为该规则的依赖
   -   若在command的前面加一个"-"，表示若此command发生错误不予理会，继续执行下去.
   $(macro) 应用这个变量，可以自动的将定义的宏加以展开，并替换使用。
   .c.o:
      gcc -c $<   这个规则表示所有的 .o文件都是依赖与其相应的.c文件的.例如mytool.o依赖于mytool.c

TARGETS”可以是空格分开的多个文件名，也可以是一个标签（例如：执行清空的“clean”）
在第一个规则之后出现的所有以[Tab]字符开始的行都会被当作命令来处理。
每一行command是一个进程，不同行之间变量值不能传递。所以，Makefile中的shell不管多长也要写在一行。
反斜线“\”连接本行和下一行
$”有特殊的含义（表示变量或者函数的引用），在规则中需要使用符号“$”的地方，需要书写两个连续的（“$$”）。
Makefile中统配符可以出现在以下两种场合：
用在规则的目标、依赖中
出现在规则的命令中
http://blog.csdn.net/wubin1124/article/details/4337794
http://blog.sina.com.cn/s/blog_54dd80920102v5qe.html

"\" 用来连接本行和下一行，将其视为一行
make: 自动在当前目录下查找Makefile或者makefile来运行
make clean : 调用makefile中的clean标签下的linux命令
像clean这种，没有被第一个目标文件直接或间接关联，那么它后面所定义的命令将不会被自动执行，可通过make clean显示调用执行
make -f fileName # 指定makefile文件来编译
-n   # 发现错误继续执行而不是退出。例如，我们可以使用这个选项检测出哪个文件编译失败。
-k   #使make仅打印出此命令将会做的事情而不实际执行。
makefile开头的目标即为Makefile的默认目标。
makefile中以“$(objects)”的方式来使用这个变量了
让make自动推导
如此多的源文件，如果每次都要键入gcc命令进行编译的话，那对程序员来说简直就是一场灾难。
make模块化编译，便于编译调试
会不会写makefile，从一个侧面说明了一个人是否具备完成大型工程的能力。对于大程序，makefile避免重复编译所有文件。如40+GB的android源码。

Jenkins持续集成工具make build


gcc g++ commandLine
.so库的加载方式：
-l参数就是用来指定程序要链接的库，-l参数紧接着就是库名，加上-ltest参数，我们就能用上libtest.so库了（当然要用libtest.so库里 的函数，我们还需要与libtest.so配套的头文件）
链接程序ld在那3个目录里找不到libxxx.so，这时另外一个参数-L就派上用场了，比如常用的X11的库，它在/usr /X11R6/lib目录下，我们编译时就要用-L/usr/X11R6/lib -lX11参数，-L参数跟着的是库文件所在的目录名
-I参数是用来指定头文件目录，如编译命令行就要加上-I /myinclude参数了。-I参数可以用相对路径，比如头文件在当前目录，可以用-I.来指定。
编译只能用gcc，链接只能用g++(链接可以用g++或者gcc -lstdc++)
gcc g++ 对于后缀为.c 和.cpp文件的区别

.h声明、.c/.cpp实现、系统头文件的查找路径及顺序、系统函数库的查找路径及顺序
编译要.h头文件声明、链接要.so实现
makefile脚本: 指定输入.输出以及如何处理这些输入文件


jni最好编写c代码而不是c++代码


