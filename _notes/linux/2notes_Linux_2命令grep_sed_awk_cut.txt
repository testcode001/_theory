文件：find
basename
dirname
readlink	

对字符串.文件的读.写操作：
echo "" cat | grep | sed | awk、cut 
head tail  more less
sort wc uniq diff 

awk读，sed写.流文本编辑器(echo输入输出重定向),grep -1rn 全文查找
cut字符串分割：section=$(echo $1 | cut -d '.' -f 1)  
基本上grep和sed能干的活awk全部都能干，而且干得更好。
-------------------------------------------------------------------------
sed -i "s/oldstring/newstring/g" `grep -rl oldstring dirName` #替换指定目录下所有文件的内容 -l是查询多文件时只输出包含匹配字符的文件名
sed -i "s/garden/mirGarden/g" `ls` #替换当前目录下所有文件的内容
sed -i "s/garden/mirGarden/g" 1.txt   #替换指定文件中的所有内容
cat text.file | sed ‘s/linuxfocus/LinuxFocus/’ > newtext.file

sed -n 7p test.log 获取指定行的内容
sed -n 7,20p a.log  #获取指定行之间的内容
sed -n '$=' a.log    获取文件的行数
sed -n '/str/=' a.log 获取指定字符串所在的行

str1=`echo "$l" | sed 's/^[ \t]*//g'`
sed 's/[ \t]*$//g'
sed s/[[:space:]]//g

tail -1 fileName 获取最后一行文件内容。
-------------------------------------------------------------------------
一行一行读取文件内容，并打印指定列.字段
awk对文本处理操作类似于数据库表
awk以行为单位，指定分隔符和提取域
awk工作流程是这样的：读入有'\n'换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域

awk -F'分隔符' '/regex/{提取域}' 文件名 #分隔符默认为空格，可不写。 -F和分隔符之间不要有空格。/regex/用于查找匹配的行，可省略
提取域默认打印整行即$0
awk中同时提供了print和printf两种打印输出的函数。
其中print函数的参数可以是变量、数值或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空格而已。
printf函数，其用法和c语言中printf基本相似,可以格式化字符串,输出复杂时，printf更加好用，代码更易懂。
awk的action函数的循环，选择，printf等与c语言完全一致。 action函数就是一系列awk命令
if..else;   while ; do..while; for; break; continue; printf 语法都和C语言的语法一致
awk中的BEGIN 和 END两个特殊的action函数 即页眉和页脚
BEGIN {print "name,shell"}  {print $1","$7} END {print "blue,/bin/nosh"}

awk循环.选择语句、awk内置变量：
$0 					整行即所有域
$1、$2...$n-NF		即各个域
NF                 浏览记录的域的个数
NR                 已读的记录数
ARGC               命令行参数个数
ARGV               命令行参数排列
ENVIRON            支持队列中系统环境变量的使用
FILENAME           awk浏览的文件名
FNR                浏览文件的记录数
FS                 设置输入域分隔符，等价于命令行 -F选项
OFS                输出域分隔符
ORS                输出记录分隔符
RS                 控制记录分隔符

http://blog.sina.com.cn/s/blog_5d22d9b40100jer4.html
awk内置字符串处理函数
awk程序设计






