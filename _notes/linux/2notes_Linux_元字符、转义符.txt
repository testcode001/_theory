输入输出重定向：
命令格式：
linuxCommand n>>file或文件操作符或设备 n={1,2,3}
linuxCommand n<file或文件描述符&设备 ,n可省略
在上面讲的输入，输出重定向 将输入，输出绑定文件或设备后。只对当前那条指令是有效的。如果需要在绑定之后，接下来的所有命令都支持的话。就需要用exec命令
exec n<或>file或文件描述符或设备	#绑定重定向

正确输出 > 或 >>   #/dev/stdout -> /proc/self/fd/1 即1代表：/dev/stdout
错误输出 2> 或 2>>  #/dev/stderr -> /proc/self/fd/2 即2代表：/dev/stderr
标准输入 < 或 <<   #/dev/stdin ->  /proc/self/fd/0 即0代表：/dev/stdin 
#&[n]代表是已经存在的文件描述符，&1 代表输出 &2代表错误输出 &-代表关闭与它绑定的描述符
例如：
ls test.sh test1.sh 1>>suc.txt 2>>err.txt	#显示当前目录文件 test.sh test1.sh test1.sh实际不存在
ls test.sh test1.sh 2>&-  与  ls test.sh test1.sh 2>/dev/null 等效	#&[n]代表是已经存在的文件描述符，&1 代表输出 &2代表错误输出 &-代表关闭与它绑定的描述符 
ls test.sh test1.sh &>/dev/null		#& 代表标准输出和错误输出，将所有标准输出与错误输出 输入到/dev/null文件


3、当命令：执行完，绑定文件的描述符也自动失效。0,1,2又会空闲。
4、一条命令启动，命令的输入，正确输出，错误输出，默认分别绑定0,1,2文件描述符。
5、一条命令在执行前，先会检查输出是否正确，如果输出设备错误，将不会进行命令执行

http://www.cnblogs.com/chengmo/archive/2010/10/20/1855805.html
LINUX与UNIX SHELL编程指南
高级Bash脚本编程指南
鸟哥的Linux私房菜 基础学习篇（第3版）

-----------------------------------------------------------------------------------------------------------------------
find命令的参数；
-exec command {} \;      #将查到的文件执行command操作,查找到的文件会作为参数放在{...} 里边。注意{}和\;之间的空格
-exec参数可用命令xargs来替代,如find . -name .svn | xargs rm -rf

-------------------------------------------------------------------------------------------------------------
shell元字符（特殊字符 Meta）
字符	说明
IFS	由 <space> 或 <tab> 或 <enter> 三者之一组成(我们常用 space )。
CR	由 <enter> 产生。
=	设定变量。
$	作变量或运算替换(请不要与 shell prompt 搞混了)。
>	重导向 stdout。 *
<	重导向 stdin。 *
|	命令管线。 *
&	重导向 file descriptor ，或将命令置于背境执行。 *
( )	将其内的命令置于 nested subshell 执行，或用于运算或命令替换。 *
{ }	将其内的命令置于 non-named function 中执行，或用在变量替换的界定范围。
;	在前一个命令结束时，而忽略其返回值，继续执行下一个命令。 *
&&	在前一个命令结束时，若返回值为 true，继续执行下一个命令。 *
||	在前一个命令结束时，若返回值为 false，继续执行下一个命令。 *
!	执行 history 列表中的命令。*
加入”*” 都是作用在命令名直接。可以看到shell 元字符，基本是作用在命令上面，用作多命令分割（或者参数分割）。因此看到与通配符有相同的字符，但是实际上作用范围不同。所以不会出现混淆。


三、shell转义符
有时候，我们想让 通配符，或者元字符 变成普通字符，不需要使用它。那么这里我们就需要用到转义符了。 shell提供转义符有三种。
字符	说明
‘’(单引号)	又叫硬转义，其内部所有的shell 元字符、通配符都会被关掉。注意，硬转义中不允许出现’(单引号)。
“”(双引号)	又叫软转义，其内部只允许出现特定的shell 元字符：$用于参数代换 `用于命令代替
\(反斜杠)	  又叫转义，去除其后紧跟的元字符或通配符的特殊意义。

the process of shell execution: 
如果用双引号包括起来，shell检测跳过了1-4步和9-10步，单引号包括起来，shell检测就会跳过了1-10步。
也就是说，双引号 只经过参数扩展、命令代换和算术代换就可以送入执行步骤，而单引号转义符直接会被送入执行步骤。
而且，无论是双引号转义符还是单引号转义符在执行的时候能够告诉各个命令自身内部是一体的，但是其本身在执行时是并不是命令中文本的一部分。



58同城：
sososhift
bighouse123456@163.com
abcd123456ZZ
