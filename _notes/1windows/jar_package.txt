打jar包：
注意：事先必须编译好需要打jar的class，并删除源文件
进入对应需要打jar的目录: jar -cvfm classes.jar mymanifest -C ./ .  
-f归档文件名、-m清单文件名、-e入口点名称 三者参数值的顺序与参数的指定顺序相同。 
-C $SOURCEFOLDER $JARFOLDER

Jar包读取外部配置文件(便于修改)		FileInputStream inputStream1 = new FileInputStream("out.properties");  
Jar包读取内部配置文件	InputStream inputStream2 = a.class.getResourceAsStream("/in.properties");
常规的如.properties文件、.xml、excel文件都是经常放配置信息的，这些文件都可以放到.jar文件中。
其实可以放一些图片，音频等，同样可以在应用程序中读取到这些文件。当然，不要放太大的文件，以免影响性能。
读取这些文件的方法很简单，就是类似MyClass.class.getClassLoader().getResourceAsStream("/myfiles/myfile.xml")的写法即可拿到一个InputStream。
-------------------------------------------------------------------------------------------
Manifest.mf文件编写规则：
manifest.mf的编写一定要注意一些细节，它是很苛刻的,我在此也载过不少跟头，谁让它这么小气呢，没办法，所以专门给大家列出来。
(1)key: value #每个属性的名称和值之间（冒号后面）一定要有空格。每一行的最后一个字符不能是空格
(2)第一行不能空，行与行之间不能有空行，
3)最后一行得是空行(在输完你的内容后加一个回车就OK)

如果有第三方的jar文件 再加上Class-Path: lib/a.jar lib/b.jar   #每个单独的jar用空格隔开就可以了。注意使用相对路径。lib目录下面放要第三方jar文件
文件的每一行都不能超过72个字节（一般是70个ASCII字母加上回车换行符）；
如果72个字节不够用，则另起一行并以至少2个空格开头：以空格开头的行都被视为前一行的续行。

MANIFEST.MF的文件内容大至如下
Main-Class: com.opensymphony.workflow.designer.Launcher
Class-Path: looks.jar forms.jar syntax.jar jgraph.jar foxtrot.jar osworkflow-2.8.0.jar oscore-2.2.5.jar
Class-Path: lib/a.jar lib/b.jar
Manifest-Version: 1.0
Ant-Version: Apache Ant 1.6.2
Created-By: 1.5.0_06-57 ("Apple Computer, Inc.")
SplashScreen-Image: org/jd/gui/images/jd_icon_128.png
-------------------------------------------------------------------------------------------
The META-INF folder: 
The following files/directories in the META-INF directory are recognized and interpreted by the Java 2 Platform to 
configure applications, extensions, class loaders and services:
http://download.oracle.com/javase/6/docs/technotes/guides/jar/jar.html#The%20META-INF%20directory
https://docs.oracle.com/javase/6/docs/technotes/guides/jar/jar.html#The%20META-INF%20directory

    MANIFEST.MF
The manifest file that is used to define extension and package related data.

    INDEX.LIST
This file is generated by the new "-i" option of the jar tool, which contains location information for packages defined in an application or extension. 
It is part of the JarIndex implementation and used by class loaders to speed up their class loading process.

    x.SF
The signature file for the JAR file.  'x' stands for the base file name.

    x.DSA
The signature block file associated with the signature file with the same base file name. 
This file stores the digital signature of the corresponding signature file.
    
	services/
This directory stores all the service provider configuration files.
-------------------------------------------------------------------------------------------
java工程命令行编译.运行
cd <projectDir>
javac -sourcepath src -cp libs/poi-3.12-20150511.jar:libs/poi-ooxml-3.12-20150511.jar:libs/poi-ooxml-schemas-3.12-20150511.jar:libs/xmlbeans-2.6.0.jar src/com/test/main/RunCts.java -d bin -encoding UTF-8 -verbose
cd bin
cp -rf libs ./
java -cp .:libs/poi-3.12-20150511.jar:libs/poi-ooxml-3.12-20150511.jar:libs/poi-ooxml-schemas-3.12-20150511.jar:libs/xmlbeans-2.6.0.jar com/test/main/RunCts
java打jar包
jar -cvfm t.jar manifest -C ./ .

Maven：
http://www.oracle.com/technetwork/cn/community/java/apache-maven-getting-started-1-406235-zhs.html
http://www.oracle.com/technetwork/cn/community/java/apache-maven-getting-started-2-405568-zhs.html 	 	

ant:
http://www.cnblogs.com/yaozhongxiao/p/3523061.html
http://www.cnblogs.com/qianxudetianxia/archive/2012/07/04/2573687.html

用WinRAR生成.jar文件：我们已经说过JAR包与ZIP包主要区别就是JAR包中多一个META-INF的目录，META-INF目录下有一个manifest.mf文件

Java调用类的顺序：java\lib\ext中的类--->Manifest.mf中指定的类-->当前目录中的类-->set CLASSPATH中指定的类。
-------------------------------------------------------------------------------------------
jar包混淆proguard：
(jd_gui反编译)
系统识别的回调函数字符串
配置文件中的字符串
反射中用到的字符串
第三方jar包-dontwarn -keep
http://blog.csdn.net/sudic_niu/article/details/7921548
http://dzxiang.iteye.com/blog/500496
http://www.cnblogs.com/0616--ataozhijia/p/3730746.html
telnet ip port ： 查看某一个机器上的某一个端口是否可以访问，如：telnet 114.80.67.193 8080

一， 我们用到反射的地方。
二， 我们代码依赖于系统的接口，比如被系统代码调用的回调方法，这种情况最复杂。 如：activity的onCreate()方法
三， 是我们的java 元素名称是在配置文件中配置好的。
四：保留第三方jar包的所有类及其成员和方法：
#jar config
-dontwarn org.apache.log4j.**
-keep class org.apache.log4j.** { *;}
6.对出现问题的类的处理。遇见一个及添加keep。
http://demo.netfoucs.com/rulon147/article/details/42550901

proguard 问题和风险
代码混淆后虽然有混淆优化的好处，但是它往往也会带来如下的几点问题
1，混淆错误，用到第三方库的时候，必须告诉 proguard 不要检查，否则proguard 会报错。
2，运行错误，当code 不能混淆的时候，我们必须要正确配置，否则程序会运行出错，这种情况问题最多。
3，调试苦难，出错了，错误堆栈是混淆后的代码 ，自己也看不懂。
-dontwarn 缺省proguard 会检查每一个引用是否正确，但是第三方库里面往往有些不会用到的类，没有正确引用。如果不配置的话，系统就会报错。

为了避免风险，你可以只是混淆部分关键的代码，但是这样你的混淆的效果也会有所降低。
http://blog.csdn.net/fastthinking/article/details/39155733

必须用android tools(which jarSigner) 导出签名包，因为proguard在导出apk的时候，对代码进行优化，混淆等工作。。

-------------------------------------------------------------------------------------------
Signed JAR File
Overview
A JAR file can be signed by using the command line jarsigner tool or directly through the java.security API. Every file entry, including non-signature related files in the META-INF directory, will be signed if the JAR file is signed by the jarsigner tool. The signature related files are:
META-INF/MANIFEST.MF
META-INF/*.SF
META-INF/*.DSA
META-INF/*.RSA
META-INF/SIG-*
Note that if such files are located in META-INF subdirectories, they are not considered signature-related. Case-insensitive versions of these filenames are reserved and will also not be signed.
Subsets of a JAR file can be signed by using the java.security API. A signed JAR file is exactly the same as the original JAR file, except that its manifest is updated and two additional files are added to the META-INF directory: a signature file and a signature block file. When jarsigner is not used, the signing program has to construct both the signature file and the signature block file.

For every file entry signed in the signed JAR file, an individual manifest entry is created for it as long as it does not already exist in the manifest. Each manifest entry lists one or more digest attribute and an optional Magic attribute.

Signature File
Each signer is represented by a signature file with extension .SF. The major part of the file is similar to the manifest file. It consists of a main section which includes information supplied by the signer but not specific to any particular jar file entry. The main section entry, x-Digest-Manifest-Main-Attributes (where x is a digest algorithm), contains the digest value for the main attributes of the manifest.
The main section is followed by a list of individual entries whose names must also be present in the manifest file. Each individual entry must contain at least the digest of its corresponding entry in the manifest file.

Paths or URLs appearing in the manifest file but not in the signature file are not used in the calculation.

Signature Validation
The signature over the signature file is first verified when the manifest is first parsed. For efficiency, this verification can be remembered. Note that this verification only validates the signature directions themselves, not the actual archive files.
The manifest main attributes are also verified when verification information is available in the signature file. If an x-Digest-Manifest-Main-Attributes entry exists in the signature file, it is compared against a digest calculated against the main attributes in the manifest file. If this calculation fails, then jar validation fails. This decision can be remembered, for efficiency. If an x-Digest-Manifest-Main-Attributes entry does not exist in the signature file, its nonexistence does not affect jar validation and the manifest main attributes are not verified.

To validate a file, a digest value in the signature file is compared against a digest calculated against the corresponding entry in the manifest file. Then, a digest value in the manifest file is compared against a digest calculated against the actual data referenced in the "Name:" attribute, which specifies either a relative file path or URL.

Example manifest file:

Manifest-Version: 1.0
Created-By: 1.3 (Sun Microsystems, Inc)
 
Name: common/class1.class
MD5-Digest: (base64 representation of MD5 digest)
 
Name: common/class2.class
MD5-Digest: (base64 representation of MD5 digest)
SHA-Digest: (base64 representation of SHA digest)
The corresponding signature file would be:
Signature-Version: 1.0
MD5-Digest-Manifest-Main-Attributes: (base64 representation of MD5 digest)
 
Name: common/class1.class
MD5-Digest: (base64 representation of MD5 digest)
 
Name: common/class2.class
MD5-Digest: (base64 representation of MD5 digest)


