CMakeLists.txt
mkdir build
cd build
cmake ..
make
make install
https://zhuanlan.zhihu.com/p/82417676

cmake：
cmake_minimum_required(VERSION 3.4.1)
project(projectName)
使用set(params)命令, 就可以定义一个变量。cmake取变量值：${varName}进行变量的引用。在 IF 等语句中,是直接使用变量名而不通过${}取值			
set(CMAKE_GENERATOR "MinGW Makefiles")
set(CMAKE_C_COMPILER "D:\\software_install\\TDM-GCC-64\\bin\\x86_64-w64-mingw32-gcc.exe")
set(CMAKE_CXX_COMPILER "D:\\software_install\\TDM-GCC-64\\bin\\x86_64-w64-mingw32-g++.exe")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}") #设置C编译选项
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11") #设置C++编译选项
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -s")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -s")
message(STATUS "C_COMPILER: ${CMAKE_C_COMPILER}")
message(STATUS "CXX_COMPILER: ${CMAKE_CXX_COMPILER}")
message(STATUS "C_FLAGS: ${CMAKE_C_FLAGS}")
message(STATUS "CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
add_subdirectory(params)  #include sub CMakeLists.txt 
aux_source_directory(./src SRC_LIST) #可有多个
aux_source_directory(./src SRC_LIST02) 
include_directories(./include ./include02)  	#可有多个
include_directories(./include04 ./include05)
add_executable(projectName ${SRC_LIST} ${SRC_LIST02})
#dependence:
add_library(params)分为源文件导入和库文件导入，库文件导入还需要调用set_target_properties(params)命令指定库文件的具体位置。
find_library(params)
在target_link_libraries(params)链接命令中，find_library(params)中的库变量需要用${libName}取变量值，而add_library(params)中的库变量不需要用${}取值，直接用libName。
即：
add_library(yuv SHARED xx.cpp)
add_library(templete SHARED IMPORTED)
set_target_properties(templete PROPERTIES IMPORTED_LOCATION    ${CMAKE_CURRENT_SOURCE_DIR}/src/main/jniLibs/${ANDROID_ABI}/libOMAFPlayer.so)
find_library(log-lib log)
target_link_libraries(yuvutil ${log-lib} yuv templete)

cmake内置变量.内置函数：
${PROJECT_SOURCE_DIR}
${CMAKE_CURRENT_SOURCE_DIR}表示CMakeLists.txt文件的绝对路径
使用$ENV{NAME}指令就可以调用系统的环境变量了,比如MESSAGE(STATUS “HOME dir: $ENV{HOME}”)。设置环境变量的方式是: SET(ENV{varName} value)
三,FIND_指令
FIND_系列指令主要包含一下指令:
FIND_FILE(<VAR> name1 path1 path2 ...)VAR 变量代表找到的文件全路径,包含文件名
FIND_LIBRARY(<VAR> name1 path1 path2 ...)VAR 变量表示找到的库全路径,包含库文件名
FIND_PATH(<VAR> name1 path1 path2 ...)VAR 变量代表包含这个文件的路径。
FIND_PROGRAM(<VAR> name1 path1 path2 ...)VAR 变量代表包含这个程序的全路径。
FIND_PACKAGE(<name> [major.minor] [QUIET] [NO_MODULE][[REQUIRED|COMPONENTS] [componets...]])
https://www.cnblogs.com/xianghang123/p/3556425.html
cmake处理多源文件目录的方法
https://blog.csdn.net/gubenpeiyuan/article/details/8667035
git@github.com:xufuji456/FFmpegAndroid.git
https://github.com/yishuinanfeng/YuvVideoPlayerDemo.git
在CMake2.8.3平台上，CMake支持下列生成器CMAKE_GENERATOR：
Borland Makefiles 		#生成Borland makefile。
MSYS Makefiles 			#生成MSYS makefile。生成的makefile用use /bin/sh作为它的shell。在运行CMake的机器上需要安装msys。
MinGW Makefiles 		#生成供mingw32-make使用的make file。生成的makefile使用cmd.exe作为它的shell。生成它们不需要msys或者unix shell。
NMake Makefiles 		#生成NMake makefile。
NMake Makefiles JOM 	#生成JOM makefile。
Unix Makefiles	 		#生成标准的UNIX makefile。在构建树上生成分层的UNIX makefile。任何标准的UNIX风格的make程序都可以通过默认的make目标构建工程。生成的makefile也提供了install目标。
set(CMAKE_GENERATOR "Visual Studio 14 2015 Win64")
set(CMAKE_GENERATOR "MinGW Makefiles")
set(CMAKE_GENERATOR "Unix Makefiles")
set(CMAKE_GENERATOR "Ninja")
set(CMAKE_GENERATOR "NMake Makefiles")
https://www.cnblogs.com/coderfenghc/archive/2012/06/18/2553964.html
https://www.cnblogs.com/coderfenghc/archive/2012/06/19/2555388.html

https://blog.csdn.net/afei__/article/details/81201039
https://www.cnblogs.com/coffee520/p/10118852.html
https://www.cnblogs.com/rswss/p/9460139.html
https://blog.csdn.net/u012150179/article/details/17852273
MinGW(GCC的Windows移植版)
MinGW64：https://sourceforge.net/projects/mingw-w64/
tdm64-gcc-5.1.0-2W(GCC的Windows-64移植版)

g++ commandLine：
-std=c++11 -frtti -fexceptions
-I表示头文件目录，-L表示库文件目录，-l表示库文件(去掉前缀lib和后缀.so)
-Wall 警告
-O1.2.3 编译优化
-l参数就是用来指定程序要链接的库，-l参数紧接着就是库名，加上-ltest参数，我们就能用上libtest.so库了（当然要用libtest.so库里 的函数，我们还需要与libtest.so配套的头文件）
链接程序ld在那3个目录里找不到libxxx.so，这时另外一个参数-L就派上用场了，比如常用的X11的库，它在/usr /X11R6/lib目录下，我们编译时就要用-L/usr/X11R6/lib -lX11参数，-L参数跟着的是库文件所在的目录名
-I参数是用来指定头文件目录，如编译命令行就要加上-I /myinclude参数了。-I参数可以用相对路径，比如头文件在当前目录，可以用-I.来指定。
gcc的基本格式就是：
    gcc [-option] objectname sourcename
    其中-option是参数，用来控制gcc的编译方式，常见的参数有如下几个：
    -o 表示我们要求输出的可执行文件名：-o binaryname
    -c 表示我们只要求编译器进行编译，输出目标代码,而不进行连接: -c objectivename.o
    -g 表示我们要求编译器在编译的时候提供我们以后对程序进行调试的信息: -g
    -O2 表示我们希望编译器在编译的时候对我们的程序进行一定程度的优化.2表示我们优化的级别.范围是1-3.不过习惯上我们都使用2的优化级别.
    -Wall是警告选项,表示我们希望gcc在编译的时候,让gcc输出她认为的一些程序中可能会出问题的一些警告信息,比如指针没有初始化就进行赋值等等一些警告信息.
    -l 与之紧紧相连的是表示连接时所要的链接库，比如多线程，如果你使用了pthread_create函数，那么你就应该在编译语句的最后加上"-lpthread"，"-l"表示连接，"pthread"表示要连接的库，
		注意他们在这里要连在一起写.如：gcc -o test test1.o test2.o -lpthread
    -I 表示将系统缺省的头文件路径扩展到当前路径，默认的路径保存在/etc/ld.conf文件中。
gcc中的优化选项-O：-O1.2.3(少优化->多优化)  -Os -Ofast -Og
-Os和-O3有异曲同工之妙，当然两者的目标不一样，-O3的目标是宁愿增加目标代码的大小，也要拼命的提高运行速度。
但是-Os这个选项是在-O2的基础之上，尽量的降低目标代码的大小，这对于存储容量很小的设备来说非常重要。
https://www.jianshu.com/p/8268b6220f12
gcc的例子：
    gcc -c test.c，表示只编译test.c文件，成功时输出目标文件test.o
    gcc -o test test.o，将test.o连接成可执行的二进制文件test
    gcc -o test test.c，将test.c编译并连接成可执行的二进制文件test
    gcc -c test.c -o test.o ，与上一条命令完全相同
    gcc test.c -o test，与上一条命令相同
    gcc -o test test1.o test2.o，将test1.o和test2.o连接为可执行的二进制文件test
    gcc -c test test1.c test2.c，将test1.c和test2.c编译并连接为可执行的二进制文件test
编译只能用gcc，链接可以用g++或者gcc -lstdc++
gcc g++ 对于后缀为.c 和.cpp文件的区别
.h声明、.c/.cpp实现、系统头文件的查找路径及顺序、系统函数库的查找路径及顺序
编译要.h头文件声明、链接要.so实现
gdb调试命令
clang
llvm
Linux中gcc，g++常用编译选项
https://www.cnblogs.com/qiangxia/p/4293756.html


Android.mk
https://www.cnblogs.com/rocomp/p/4892866.html
https://blog.csdn.net/xiangzilv1987/article/details/16805983
https://blog.csdn.net/langresser_king/article/details/8275291
http://www.cnblogs.com/likwo/archive/2012/05/09/2492614.html
https://blog.csdn.net/nwpushuai/article/details/79380683
https://blog.csdn.net/earbao/article/details/38702245
https://movies.ds.9wuli.com/movies/20190104/a150e1493a545c7a6160dd698958c20b?sign=2deffe6d417e9c1267afa7241ec30223&t=5c354791
https://segmentfault.com/q/1010000000605907
https://www.cnblogs.com/soniclq/archive/2013/02/25/2932391.html
android NDK下载
https://www.cnblogs.com/hzl6255/p/6088678.html

NDK:
https://blog.csdn.net/afei__/article/details/81290711

http://c.biancheng.net/view/1089.html



