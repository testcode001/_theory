算法：
排序稳定性：相等的n个数在排序前的前后位置顺序和排序后的前后位置是否相同
信息安全：md5、sha-1
账户安全：ssh-keygen pgp
异步处理.批量处理：flag标记.状态机
唯一性：
1.一次性的：UUID.时间戳.随机数
2.永久的：如mac地址
3.可变化的：如手机号
OAuth的原理和授权流程
C-S模式时，数据放在服务器端最安全，如http token(mac+imei)：数据唯一、固定且不包含敏感数据 
map<K,V>形式的映射、转换

数据传输：Protocol Buffer
数据的序列化和反序列化
私有协议：
数据源及路径.原始文件-->处理流-->byte数据-->新文件

***排序是拿位置跟位置比较，而不是那数值跟数值比较。所以要注意更新位置上的数值。
查找: 哈希查找、二分法、顺序
排序：时间.空间.稳定性：选择排序.for循环二次嵌套+数据交换、快排   
外排序.内排序：外部归并排序
统计：查找字符串中各个字母出现的次数
二叉树查找算法：深度优先遍历.广度优先遍历、左中右序、反序列化

递归：函数内部调用函数自身，必须在函数结束前判断结束条件
链表反转、判断链表是否有环

加密.解密
1.加密算法Cipher："algorithm/mode/padding"  公钥.私钥(有密码)对象、初始化向量iv
a.对称加密DES AES  3des(一个秘钥，且需要传输。 秘钥的管理麻烦，但速度快，效率高)	
b.非对称加密RSA DSA ECC ECCDSA(公钥.私钥)速度慢.效率低	(数字证书即公钥)
2.消息摘要算法MessageDigest.数字签名：校验防篡改 md5 sha-1 sha-512 uuid信息摘要算法.数字签名， 单向.不可逆
3.模拟信号->转变成数字信号 编.解码表：即map映射表 编.解码规则 Base64将http协议中的不可见字符.乱码变成可见字符
	编码成非二进制数，解码成二进制数，二进制编码是交换中心
4.X.509数字证书： 包含公钥.私钥.算法.签名等一系列属性的对象  SSL TLS
密匙仓库keystore type(keytool.exe)：JKS, JCEKS, PKCS12, BKS，UBER
数字证书格式：.pfx .p12 .cer .pem

加密通信
签名：对明文签名后，对签名进行加密(消息摘要算法+非对称加密)

浏览器内置有一些CA或CA授权机构颁发的公钥
SSL访问流程
位运算是对整数的二进制形式进行的运算

http://snowolf.iteye.com/blog/391931	
http://snowolf.iteye.com/blog/735294
DES、3DES加密：
http://www.blogjava.net/amigoxie/archive/2014/07/06/415503.html
AES加密：
http://blog.csdn.net/hbcui1984/article/details/5201247

Dijkstra最短路径算法
傅立叶变换与快速傅立叶变换





查找: 哈希查找、二分法、顺序
排序：时间.空间.稳定性：选择排序.for循环二次嵌套+数据交换、快排   
外排序.内排序：外部归并排序
统计：查找字符串中各个字母出现的次数
二叉树查找算法：深度优先遍历.广度优先遍历、左中右序、反序列化

递归：函数内部调用函数自身，必须在函数结束前判断结束条件
链表反转、判断链表是否有环

加密.解密
md5sum sha1sum等linux命令
1.md5 sha-1 sha-512 uuid信息摘要算法.数字签名， 不可逆
2.Base64编.解码：将http协议中的不可见字符.乱码变成可见字符
3.对称加密(一个秘钥，且需要传输。 秘钥的管理麻烦，但速度快，效率高)	
des aes 3des 
4.非对称加密.解密(公钥.私钥)速度慢.效率低	(数字证书即公钥)
RSA DSA ECC
数字签名：md5+非对称加密(传输防篡改)
http://snowolf.iteye.com/blog/391931
DES、3DES加密：
http://www.blogjava.net/amigoxie/archive/2014/07/06/415503.html
AES加密：
http://blog.csdn.net/hbcui1984/article/details/5201247

Dijkstra最短路径算法
傅立叶变换与快速傅立叶变换
-------------------------------------------------------------------
1.uuid.guid token
MAC、纳秒级时间戳、5MD5等hash算法，u盾等
芯片ID码和许多可能的数字、随机数

2.消息摘要算法.hash算法.MD5.SHA-1,常用于数字签名领域(hash算法+非对称加密)。
著名的摘要算法有RSA公司的md5算法、CRC32和SHA-1.sha-256.sha-512算法及其大量的变体。
只有完全相同的内容才能得到相同hashcode
不可逆，经过加密的数据无法被解密 (只能在本地或到相关网站暴力破解)
加密过程不需要密钥，不存在密钥的管理与分发问题，适合于分布式网络相同上使用。
20MD5

3.对称加密算法AES: 信息.秘钥 (密钥越大，加密越强,分为128、192和256 bit三种秘钥,破解一个128位秘钥的AES密码需要大约149亿万年的时间)
4.非对称加密算法.公开.公钥.私钥RSA算法和美国国家标准局提出的DSA：非对称加密使用这对密钥中的一个进行加密，而解密则需要另一个密钥。
非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。
解决的办法是将对称加密的密钥使用非对称加密的公钥进行加密，然后发送出去，接收方使用私钥进行解密得到对称加密的密钥，然后双方可以使用对称加密来进行沟通。
比如，你向银行请求公钥，银行将公钥发给你，
你使用公钥对消息加密，那么只有私钥的持有人--银行才能对你的消息解密。
与对称加密不同的是，银行不需要将私钥通过网络发送出去，因此安全性大大提高。
3des
密码.秘钥.
待解密的密文

Long-term Key/Master Key
Short-term Key/Session Key
Kerberos authentication

5.Base64编码将不可见字符变成可见字符
Base64编码要求把3个8位字节（3*8=24）转化为4个6位的字节（4*6=24），之后在6位的前面补两个0，形成8位一个字节的形式。 如果剩下的字符不足3个字节，则用0填充，输出字符使用'='
排列组合算法？

破解aes
1.直接暴力尝试且无次数限制
2.进入内网，截获密文，知道加密方式后，跑字典暴力破解
WAP和WAP2的AES加密只能跑字典：下载/排列组合算法 (密码用：字母.数字.特殊字符.汉字？)
3.截获密文和秘钥，直接用秘钥进行解密
4.算法逆向破解还原原始报文

安全模式：WPA、WPA2、wep
加密规则：AES tkip


1.数据安全：加密.解密  
设备重启，进入单用户模式，只有真正拥有设备、接触设备的人才可以删除root密码.密码定期修改
2.服务器端：web安全、防DDos攻击
3.客户端：打包混淆.代码防破解/jni防破解
拿到数据库：只知道密文，不知道数据加密方式，即使知道也无法破解
程序：数据处理流程，加密方式

数据每天备份
设备冗余，避免down机或重启
功能实现
性能测试、统计.监测.日志记录














